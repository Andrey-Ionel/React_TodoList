{"version":3,"sources":["components/AddTodo/AddTodo.js","components/TodoItem/TodoItem.js","components/ListTodos/ListTodos.js","components/Footer/Footer.js","components/ToggleTodos/ToggleTodos.js","App.js","index.js"],"names":["AddTodo","props","useState","todoName","setTodo","useEffect","inputRef","current","focus","useRef","className","placeholder","onChange","event","target","value","onKeyPress","charCode","title","id","Date","now","completed","name","TodoItem","toggleTodo","removeTodo","updateTodo","editRef","setValue","editing","setEditing","todoClassCompleted","todoClassEditing","type","checked","onDoubleClick","onClick","ref","onBlur","e","ListTodos","todos","map","todo","Footer","clearCompletedTodos","uncompletedTodosCount","filter","setFilter","hasCompleted","href","preventDefault","ToggleTodos","toggleCompletedTodos","isCompletedAll","setChecked","htmlFor","App","setTodos","filteredTodos","useCallback","reduce","count","completedTodosCount","length","trim","newTodos","editingTodos","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.8c545f5f.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./addTodo.css\";\r\n\r\nexport function AddTodo(props) {\r\n  const [todoName, setTodo] = useState(\"\");\r\n  const onChangeInputVal = (event) => {\r\n    setTodo(event.target.value);\r\n  };\r\n  const onEnterPress = (event) => {\r\n    if (event.charCode === 13) {\r\n      props.onKeyPress({\r\n        title: todoName,\r\n        id: Date.now(),\r\n        completed: false\r\n      });\r\n      setTodo(\"\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, []);\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  return (\r\n    <input\r\n      className=\"new-todo\"\r\n      placeholder=\"What needs to be done?\"\r\n      onChange={onChangeInputVal}\r\n      onKeyPress={onEnterPress}\r\n      name=\"text\"\r\n      value={todoName}\r\n      // ref={inputRef}\r\n    />\r\n  );\r\n}\r\n","import React, { useState, useEffect, useRef } from \"react\";\n\nexport function TodoItem({\n  completed,\n  title,\n  id,\n  toggleTodo,\n  removeTodo,\n  updateTodo\n}) {\n  const editRef = useRef();\n  const [value, setValue] = useState(title);\n  const [editing, setEditing] = useState(false);\n\n  const onChangeCheckBoxVal = (event) => {\n    toggleTodo(id, event.target.checked);\n  };\n  const todoClassCompleted = completed ? \"completed\" : \"\";\n  const todoClassEditing = editing ? \"editing\" : \"\";\n  useEffect(() => {\n    if (editing) {\n      editRef.current.focus();\n    }\n  }, [editing]);\n\n  return (\n    <li className={`${todoClassCompleted} ${todoClassEditing}`}>\n      <div className=\"view\">\n        <input\n          className=\"toggle\"\n          type=\"checkbox\"\n          checked={completed}\n          onChange={onChangeCheckBoxVal}\n        />\n        <label onDoubleClick={() => setEditing(true)}>{title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => removeTodo(id)}\n        ></button>\n      </div>\n      <input\n        ref={editRef}\n        type=\"text\"\n        className=\"edit\"\n        onBlur={() => {\n          setEditing(false);\n          updateTodo(id, value);\n        }}\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n      />\n    </li>\n  );\n}\n","import React from \"react\";\r\nimport { TodoItem } from \"../TodoItem/TodoItem\";\r\nimport \"./listTodos.css\";\r\n\r\nexport function ListTodos({ todos, toggleTodo, removeTodo, updateTodo }) {\r\n  return (\r\n    <ul className=\"todo-list\">\r\n      {todos.map((todo, id) => (\r\n        <TodoItem\r\n          key={todo.id}\r\n          title={todo.title}\r\n          id={todo.id}\r\n          completed={todo.completed}\r\n          toggleTodo={toggleTodo}\r\n          removeTodo={removeTodo}\r\n          updateTodo={updateTodo}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./footer.css\";\n\nexport function Footer({\n  clearCompletedTodos,\n  uncompletedTodosCount,\n  filter,\n  setFilter,\n  hasCompleted\n}) {\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        <strong>{uncompletedTodosCount} </strong>\n        items left\n      </span>\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"/\"\n            className={filter === \"all\" ? \"selected\" : \"\"}\n            onClick={(e) => {\n              e.preventDefault();\n              setFilter(\"all\");\n            }}\n          >\n            All\n          </a>\n        </li>\n        <li>\n          <a\n            className={filter === \"active\" ? \"selected\" : \"\"}\n            href=\"/active\"\n            onClick={(e) => {\n              e.preventDefault();\n              setFilter(\"active\");\n            }}\n          >\n            Active\n          </a>\n        </li>\n        <li>\n          <a\n            className={filter === \"completed\" ? \"selected\" : \"\"}\n            href=\"/completed\"\n            onClick={(e) => {\n              e.preventDefault();\n              setFilter(\"completed\");\n            }}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n      {hasCompleted && (\n        <button\n          className=\"clear-completed\"\n          onClick={() => clearCompletedTodos()}\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./toggleTodos.css\";\r\n\r\nexport function ToggleTodos({ toggleCompletedTodos, isCompletedAll }) {\r\n  const [checked, setChecked] = useState(isCompletedAll);\r\n  const onChangeCheckBoxAllVal = (event) => {\r\n    setChecked(event.target.checked);\r\n  };\r\n  useEffect(() => {\r\n    toggleCompletedTodos(checked);\r\n  }, [checked, toggleCompletedTodos]);\r\n  return (\r\n    <>\r\n      <input\r\n        id=\"toggle-all\"\r\n        className=\"toggle-all\"\r\n        type=\"checkbox\"\r\n        checked={checked}\r\n        onChange={onChangeCheckBoxAllVal}\r\n      />\r\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\r\n    </>\r\n  );\r\n}\r\n","import React, { useCallback, useState } from \"react\";\nimport \"./styles.css\";\nimport { AddTodo } from \"./components/AddTodo/AddTodo\";\nimport { ListTodos } from \"./components/ListTodos/ListTodos\";\nimport { Footer } from \"./components/Footer/Footer\";\nimport { ToggleTodos } from \"./components/ToggleTodos/ToggleTodos\";\n\nexport default function App() {\n  const [filter, setFilter] = useState(\"all\"); // active | completed\n  const [todos, setTodos] = useState([]);\n\n  const filteredTodos = todos.filter((todo) => {\n    if (filter === \"active\") {\n      return !todo.completed;\n    }\n    if (filter === \"completed\") {\n      return todo.completed;\n    }\n    return true;\n  });\n\n  const addNewTodo = (todo) => {\n    if (todo.title.trim()) {\n      const newTodos = [todo, ...todos];\n      setTodos(newTodos);\n    }\n  };\n\n  const toggleCompletedTodos = useCallback((completed) => {\n    setTodos((todos) =>\n      todos.map((todo) => {\n        todo.completed = completed;\n        return todo;\n      })\n    );\n  }, []);\n\n  const toggleTodo = (id, completed) => {\n    const newTodos = todos.map((todo) => {\n      if (todo.id === id) {\n        todo.completed = completed;\n      }\n      return todo;\n    });\n    setTodos(newTodos);\n  };\n\n  const removeTodo = (id) => {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  };\n\n  const updateTodo = (id, title) => {\n    const editingTodos = todos.map((todo) => {\n      if (todo.id === id && title.trim()) {\n        todo.title = title;\n      }\n      return todo;\n    });\n    setTodos(editingTodos);\n  };\n\n  const uncompletedTodosCount = todos.reduce((count, todo) => {\n    if (!todo.completed) {\n      count++;\n    }\n    return count++;\n  }, 0);\n\n  const completedTodosCount = todos.reduce((count, todo) => {\n    if (todo.completed) count++;\n    return count;\n  }, 0);\n\n  const isCompletedAll = todos.length === completedTodosCount;\n\n  const hasCompleted = completedTodosCount > 0;\n\n  const clearCompletedTodos = () => {\n    setTodos(\n      todos.filter((todo) => {\n        if (todo.completed) {\n          return !todo.completed;\n        }\n        return todo;\n      })\n    );\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <AddTodo onKeyPress={addNewTodo} />\n      </header>\n      <section className=\"main\">\n        {todos.length > 0 && (\n          <ToggleTodos\n            toggleCompletedTodos={toggleCompletedTodos}\n            isCompletedAll={isCompletedAll}\n          />\n        )}\n        <ListTodos\n          todos={filteredTodos}\n          toggleTodo={toggleTodo}\n          removeTodo={removeTodo}\n          updateTodo={updateTodo}\n        />\n      </section>\n      {todos.length > 0 && (\n        <Footer\n          filter={filter}\n          setFilter={setFilter}\n          clearCompletedTodos={clearCompletedTodos}\n          uncompletedTodosCount={uncompletedTodosCount}\n          hasCompleted={hasCompleted}\n        />\n      )}\n    </section>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}